# -*- coding: utf-8 -*-
"""周易卦爻辞维基文库爬虫脚本 (含彖传、象传)

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1JvLI-8Faa9nHZ4zYufGFQAFAHTifYxBs
"""

import requests
from bs4 import BeautifulSoup
import json
import time
import random # 用于随机延时

# 六十四卦基本数据 (与占卜程序中的 HEXAGRAM_DATA 结构一致)
# 用于生成URL和作为JSON文件的键
HEXAGRAM_BASE_DATA = {
    "111111": {"id": 1, "char": "䷀", "name_cn": "乾", "pinyin": "Qián"},
    "000000": {"id": 2, "char": "䷁", "name_cn": "坤", "pinyin": "Kūn"},
    "100010": {"id": 3, "char": "䷂", "name_cn": "屯", "pinyin": "Zhūn"},
    "010001": {"id": 4, "char": "䷃", "name_cn": "蒙", "pinyin": "Méng"},
    "010111": {"id": 5, "char": "䷄", "name_cn": "需", "pinyin": "Xū"},
    "111010": {"id": 6, "char": "䷅", "name_cn": "訟", "pinyin": "Sòng"},
    "000010": {"id": 7, "char": "䷆", "name_cn": "師", "pinyin": "Shī"},
    "010000": {"id": 8, "char": "䷇", "name_cn": "比", "pinyin": "Bǐ"},
    "110111": {"id": 9, "char": "䷈", "name_cn": "小畜", "pinyin": "Xiǎo Xù"},
    "111011": {"id": 10, "char": "䷉", "name_cn": "履", "pinyin": "Lǚ"},
    "000111": {"id": 11, "char": "䷊", "name_cn": "泰", "pinyin": "Tài"},
    "111000": {"id": 12, "char": "䷋", "name_cn": "否", "pinyin": "Pǐ"},
    "111101": {"id": 13, "char": "䷌", "name_cn": "同人", "pinyin": "Tóng Rén"},
    "101111": {"id": 14, "char": "䷍", "name_cn": "大有", "pinyin": "Dà Yǒu"},
    "000001": {"id": 15, "char": "䷎", "name_cn": "謙", "pinyin": "Qiān"},
    "100000": {"id": 16, "char": "䷏", "name_cn": "豫", "pinyin": "Yù"},
    "011100": {"id": 17, "char": "䷐", "name_cn": "隨", "pinyin": "Suí"},
    "001110": {"id": 18, "char": "䷑", "name_cn": "蠱", "pinyin": "Gǔ"},
    "000011": {"id": 19, "char": "䷒", "name_cn": "臨", "pinyin": "Lín"},
    "110000": {"id": 20, "char": "䷓", "name_cn": "觀", "pinyin": "Guān"},
    "101100": {"id": 21, "char": "䷔", "name_cn": "噬嗑", "pinyin": "Shì Kè"},
    "001101": {"id": 22, "char": "䷕", "name_cn": "賁", "pinyin": "Bì"},
    "001000": {"id": 23, "char": "䷖", "name_cn": "剝", "pinyin": "Bō"},
    "000100": {"id": 24, "char": "䷗", "name_cn": "復", "pinyin": "Fù"},
    "111100": {"id": 25, "char": "䷘", "name_cn": "無妄", "pinyin": "Wú Wàng"},
    "001111": {"id": 26, "char": "䷙", "name_cn": "大畜", "pinyin": "Dà Xù"},
    "100001": {"id": 27, "char": "䷚", "name_cn": "頤", "pinyin": "Yí"},
    "011110": {"id": 28, "char": "䷛", "name_cn": "大過", "pinyin": "Dà Guò"},
    "010010": {"id": 29, "char": "䷜", "name_cn": "坎", "pinyin": "Kǎn"},
    "101101": {"id": 30, "char": "䷝", "name_cn": "離", "pinyin": "Lí"},
    "011001": {"id": 31, "char": "䷞", "name_cn": "咸", "pinyin": "Xián"},
    "100110": {"id": 32, "char": "䷟", "name_cn": "恆", "pinyin": "Héng"},
    "111001": {"id": 33, "char": "䷠", "name_cn": "遯", "pinyin": "Dùn"},
    "100111": {"id": 34, "char": "䷡", "name_cn": "大壯", "pinyin": "Dà Zhuàng"},
    "101000": {"id": 35, "char": "䷢", "name_cn": "晉", "pinyin": "Jìn"},
    "000101": {"id": 36, "char": "䷣", "name_cn": "明夷", "pinyin": "Míng Yí"},
    "110101": {"id": 37, "char": "䷤", "name_cn": "家人", "pinyin": "Jiā Rén"},
    "101011": {"id": 38, "char": "䷥", "name_cn": "睽", "pinyin": "Kuí"},
    "001010": {"id": 39, "char": "䷦", "name_cn": "蹇", "pinyin": "Jiǎn"},
    "010100": {"id": 40, "char": "䷧", "name_cn": "解", "pinyin": "Xiè"},
    "001011": {"id": 41, "char": "䷨", "name_cn": "損", "pinyin": "Sǔn"},
    "110100": {"id": 42, "char": "䷩", "name_cn": "益", "pinyin": "Yì"},
    "011111": {"id": 43, "char": "䷪", "name_cn": "夬", "pinyin": "Guài"},
    "111110": {"id": 44, "char": "䷫", "name_cn": "姤", "pinyin": "Gòu"},
    "011000": {"id": 45, "char": "䷬", "name_cn": "萃", "pinyin": "Cuì"},
    "000110": {"id": 46, "char": "䷭", "name_cn": "升", "pinyin": "Shēng"},
    "011010": {"id": 47, "char": "䷮", "name_cn": "困", "pinyin": "Kùn"},
    "010110": {"id": 48, "char": "䷯", "name_cn": "井", "pinyin": "Jǐng"},
    "011101": {"id": 49, "char": "䷰", "name_cn": "革", "pinyin": "Gé"},
    "101110": {"id": 50, "char": "䷱", "name_cn": "鼎", "pinyin": "Dǐng"},
    "100100": {"id": 51, "char": "䷲", "name_cn": "震", "pinyin": "Zhèn"},
    "001001": {"id": 52, "char": "䷳", "name_cn": "艮", "pinyin": "Gèn"},
    "110001": {"id": 53, "char": "䷴", "name_cn": "漸", "pinyin": "Jiàn"},
    "100011": {"id": 54, "char": "䷵", "name_cn": "歸妹", "pinyin": "Guī Mèi"},
    "100101": {"id": 55, "char": "䷶", "name_cn": "豐", "pinyin": "Fēng"},
    "101001": {"id": 56, "char": "䷷", "name_cn": "旅", "pinyin": "Lǚ"},
    "110110": {"id": 57, "char": "䷸", "name_cn": "巽", "pinyin": "Xùn"},
    "011011": {"id": 58, "char": "䷹", "name_cn": "兌", "pinyin": "Duì"},
    "110010": {"id": 59, "char": "䷺", "name_cn": "渙", "pinyin": "Huàn"},
    "010011": {"id": 60, "char": "䷻", "name_cn": "節", "pinyin": "Jié"},
    "110011": {"id": 61, "char": "䷼", "name_cn": "中孚", "pinyin": "Zhōng Fú"},
    "001100": {"id": 62, "char": "䷽", "name_cn": "小過", "pinyin": "Xiǎo Guò"},
    "010101": {"id": 63, "char": "䷾", "name_cn": "既濟", "pinyin": "Jì Jì"},
    "101010": {"id": 64, "char": "䷿", "name_cn": "未濟", "pinyin": "Wèi Jì"},
}

BASE_URL = "https://zh.wikisource.org/wiki/周易/"
OUTPUT_FILENAME = "gua_yao_ci.json"

def fetch_page(url):
    """获取指定URL的HTML内容"""
    try:
        headers = {
            'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36'
        }
        response = requests.get(url, headers=headers, timeout=15)
        response.raise_for_status()
        return response.text
    except requests.exceptions.RequestException as e:
        print(f"  [错误] 获取URL {url} 失败: {e}")
        return None

def clean_text(element):
    """
    辅助函数：获取元素的文本并清理，移除如<small>标签内的注疏。
    """
    if not element:
        return ""

    # 创建一个元素的副本进行修改，以免影响后续的find操作
    element_copy = BeautifulSoup(str(element), 'html.parser')

    # 移除所有<small>标签 (通常包含注疏，如“一作太和”)
    for small_tag in element_copy.find_all('small'):
        small_tag.decompose()

    return element_copy.get_text(separator=' ', strip=True)


def parse_hexagram_page(html_content, hex_name_cn):
    """
    解析单个卦的HTML页面，提取卦辞、爻辞、彖传和象传。
    """
    if not html_content:
        return None

    soup = BeautifulSoup(html_content, 'html.parser')
    data = {
        "gua_ci": "", "yao_ci": [],
        "tuan_ci": "", "da_xiang_ci": "", "xiao_xiang_ci": []
    }

    content_div = soup.find('div', class_='mw-parser-output')
    if not content_div:
        print(f"  [警告] {hex_name_cn}: 未找到主要内容区域 'div.mw-parser-output'。")
        return None # 返回None表示解析失败

    # --- 1. 解析卦辞 (Gua Ci) 和爻辞 (Yao Ci) ---
    # 优先尝试基于 <li><ul><li><b>卦名</b>...</li></ul><ol>...</ol></li> 的结构
    main_li_container_found = False
    all_b_tags_for_guaci = content_div.find_all('b') # 重新查找，避免与彖曰等混淆

    for b_tag in all_b_tags_for_guaci:
        # 确保是卦名本身，而不是“彖曰：”或“象曰：”中的<b>
        if b_tag.text.strip() == hex_name_cn and \
           b_tag.find_parent('li') and \
           b_tag.find_parent('li').find_parent('ul') and \
           b_tag.find_parent('li').find_parent('ul').find_parent('li'):

            parent_span = b_tag.find_parent('span')
            if parent_span:
                span_text = parent_span.text.strip() # 使用原始文本，可能包含卦名
                if span_text.startswith(hex_name_cn + "：") or \
                   span_text.startswith(hex_name_cn + "，"):

                    main_li_container = parent_span.find_parent('li').find_parent('ul').find_parent('li')
                    if main_li_container:
                        # 提取卦辞 (span_text 本身就是卦辞，可能包含卦名)
                        data["gua_ci"] = span_text

                        ol_for_yao_ci = main_li_container.find('ol', recursive=False)
                        if ol_for_yao_ci:
                            yao_count = 0
                            for li_tag_in_ol in ol_for_yao_ci.find_all('li', recursive=False):
                                span_in_li = li_tag_in_ol.find('span')
                                if span_in_li:
                                    p_text = span_in_li.text.strip()
                                    if not p_text: continue

                                    if hex_name_cn == "乾" and p_text.startswith("用九"):
                                        data["yong_jiu"] = p_text
                                    elif hex_name_cn == "坤" and p_text.startswith("用六"):
                                        data["yong_liu"] = p_text
                                    elif yao_count < 6:
                                        prefixes = ["初九", "初六", "九二", "六二", "九三", "六三", "九四", "六四", "九五", "六五", "上九", "上六"]
                                        is_actual_yao_ci = any(p_text.startswith(p) for p in prefixes)
                                        if is_actual_yao_ci:
                                            data["yao_ci"].append(p_text)
                                            yao_count += 1
                            main_li_container_found = True
                            break # 找到卦辞和爻辞，跳出b_tag循环

    if not main_li_container_found:
        print(f"  [信息] {hex_name_cn}: 未能按新结构解析卦辞/爻辞，尝试H2/P回退。")
        # --- H2/P 回退逻辑 (简化版，保持原有逻辑结构) ---
        jingwen_h2 = content_div.find("span", {"class": "mw-headline", "id": "經文"}) or \
                     content_div.find("span", {"class": "mw-headline", "id": ".E7.B6.93.E6.96.87"})
        if jingwen_h2:
            current_element = jingwen_h2.parent
            p_after_h2 = current_element.find_next_sibling('p')
            if p_after_h2:
                b_tag_in_p = p_after_h2.find('b')
                data["gua_ci"] = b_tag_in_p.text.strip() if b_tag_in_p else p_after_h2.text.strip()
                current_element = p_after_h2

                yao_count = 0
                temp_el = current_element
                while temp_el and yao_count < 7:
                    next_p = temp_el.find_next_sibling('p')
                    if not next_p: break
                    temp_el = next_p
                    p_text = temp_el.text.strip()
                    if not p_text: continue
                    if hex_name_cn == "乾" and p_text.startswith("用九"): data["yong_jiu"] = p_text
                    elif hex_name_cn == "坤" and p_text.startswith("用六"): data["yong_liu"] = p_text
                    elif yao_count < 6:
                        prefixes = ["初九", "初六", "九二", "六二", "九三", "六三", "九四", "六四", "九五", "六五", "上九", "上六"]
                        if any(p_text.startswith(p) for p in prefixes):
                            data["yao_ci"].append(p_text)
                            yao_count += 1
        else:
            print(f"  [警告] {hex_name_cn}: 回退方法也未找到“经文”标题。卦辞/爻辞可能缺失。")
            data["gua_ci"] = "（卦辞提取失败）"

    # 确保爻辞列表长度为6，不足则填充
    while len(data["yao_ci"]) < 6:
        data["yao_ci"].append(f"（爻辞 {len(data['yao_ci'])+1} 提取失败）")
    data["yao_ci"] = data["yao_ci"][:6]


    # --- 2. 解析彖传 (Tuan Ci) ---
    tuan_b_tag = content_div.find(lambda tag: tag.name == 'b' and tag.text.strip() == "彖曰：")
    if tuan_b_tag:
        tuan_container_li = tuan_b_tag.find_parent('li')
        if tuan_container_li:
            tuan_text_ul = tuan_container_li.find('ul') # 包含彖传文本的<ul>
            if tuan_text_ul:
                tuan_parts = []
                # 彖传文本可能分布在多个<li>中，有些<li>内部可能还有嵌套的<ul><li>
                for li_item in tuan_text_ul.find_all('li', recursive=False): # 只找直接子级li
                    # 获取当前li的直接文本和其所有子元素的文本，然后清理
                    tuan_parts.append(clean_text(li_item))
                data["tuan_ci"] = "\n".join(tuan_parts).strip()
            else:
                print(f"  [警告] {hex_name_cn}: 找到“彖曰：”但未找到其文本容器<ul>。")
                data["tuan_ci"] = "（彖辞提取失败）"
        else:
            print(f"  [警告] {hex_name_cn}: 找到“彖曰：”但其父级不是<li>。")
            data["tuan_ci"] = "（彖辞提取失败）"
    else:
        print(f"  [信息] {hex_name_cn}: 未找到“彖曰：”。")
        data["tuan_ci"] = "（彖辞未找到）"


    # --- 3. 解析象传 (Xiang Ci) ---
    xiang_b_tag = content_div.find(lambda tag: tag.name == 'b' and tag.text.strip() == "象曰：")
    if xiang_b_tag:
        xiang_container_li = xiang_b_tag.find_parent('li')
        if xiang_container_li:
            # 大象 (Da Xiang)
            da_xiang_ul = xiang_container_li.find('ul') # 第一个ul通常是大象
            if da_xiang_ul:
                da_xiang_li = da_xiang_ul.find('li')
                if da_xiang_li:
                    data["da_xiang_ci"] = clean_text(da_xiang_li)
                else:
                    print(f"  [警告] {hex_name_cn}: 找到“象曰：”的<ul>但未找到大象的<li>。")
                    data["da_xiang_ci"] = "（大象辞提取失败）"
            else:
                print(f"  [警告] {hex_name_cn}: 找到“象曰：”但未找到大象的<ul>容器。")
                data["da_xiang_ci"] = "（大象辞提取失败）"

            # 小象 (Xiao Xiang)
            xiao_xiang_ol = xiang_container_li.find('ol') # ol通常是小象
            if xiao_xiang_ol:
                xiao_xiang_parts = []
                for li_item in xiao_xiang_ol.find_all('li', recursive=False):
                    xiao_xiang_parts.append(clean_text(li_item))
                data["xiao_xiang_ci"] = xiao_xiang_parts
            else:
                print(f"  [警告] {hex_name_cn}: 找到“象曰：”但未找到小象的<ol>容器。")
                data["xiao_xiang_ci"] = ["（小象辞提取失败）"] * (7 if hex_name_cn in ["乾", "坤"] else 6) # 预估长度
        else:
            print(f"  [警告] {hex_name_cn}: 找到“象曰：”但其父级不是<li>。")
            data["da_xiang_ci"] = "（大象辞提取失败）"
            data["xiao_xiang_ci"] = ["（小象辞提取失败）"] * (7 if hex_name_cn in ["乾", "坤"] else 6)
    else:
        print(f"  [信息] {hex_name_cn}: 未找到“象曰：”。")
        data["da_xiang_ci"] = "（大象辞未找到）"
        data["xiao_xiang_ci"] = ["（小象辞未找到）"] * (7 if hex_name_cn in ["乾", "坤"] else 6)

    return data


def main():
    """主函数，遍历所有卦，爬取数据并保存到JSON文件"""
    all_hexagrams_data = {}
    total_hexagrams = len(HEXAGRAM_BASE_DATA)
    count = 0

    print(f"开始从维基文库爬取 {total_hexagrams} 卦的卦爻辞、彖传、象传...")

    for binary_key, info in HEXAGRAM_BASE_DATA.items():
        count += 1
        hex_id = info['id']
        hex_name_cn = info['name_cn']

        print(f"\n({count}/{total_hexagrams}) 正在处理: {hex_id}. {hex_name_cn} ({binary_key})")

        # 维基百科的URL通常是 /wiki/条目名，对于周易子页面是 /wiki/周易/卦名
        url_hex_name = hex_name_cn
        # 特殊处理一些维基百科上可能使用不同字形的卦名 (如果需要)
        # 例如： '蒙昧' vs '蒙', '官事' vs '讼'。目前假设 HEXAGRAM_BASE_DATA 中的 name_cn 是正确的URL部分。

        url = f"{BASE_URL}{url_hex_name}"
        print(f"  URL: {url}")

        html_content = fetch_page(url)
        parsed_data = None # 初始化
        if html_content:
            parsed_data = parse_hexagram_page(html_content, hex_name_cn)

        if parsed_data:
            entry = {
                "id": hex_id,
                "name_cn": hex_name_cn,
                "gua_ci": parsed_data.get("gua_ci", "（卦辞缺失）"),
                "yao_ci": parsed_data.get("yao_ci", ["（爻辞缺失）"]*6),
                "tuan_ci": parsed_data.get("tuan_ci", "（彖辞缺失）"),
                "da_xiang_ci": parsed_data.get("da_xiang_ci", "（大象辞缺失）"),
                "xiao_xiang_ci": parsed_data.get("xiao_xiang_ci", ["（小象辞缺失）"]*(7 if hex_name_cn in ["乾","坤"] else 6) )
            }
            if "yong_jiu" in parsed_data:
                entry["yong_jiu"] = parsed_data["yong_jiu"]
            if "yong_liu" in parsed_data:
                entry["yong_liu"] = parsed_data["yong_liu"]

            all_hexagrams_data[binary_key] = entry
            print(f"  成功处理: {hex_name_cn}")
        else:
            print(f"  未能有效解析或获取页面: {hex_name_cn}")
            all_hexagrams_data[binary_key] = {
                "id": hex_id, "name_cn": hex_name_cn,
                "gua_ci": "（提取失败）", "yao_ci": ["（提取失败）"]*6,
                "tuan_ci": "（提取失败）", "da_xiang_ci": "（提取失败）",
                "xiao_xiang_ci": ["（提取失败）"]*(7 if hex_name_cn in ["乾","坤"] else 6)
            }

        time.sleep(random.uniform(1.0, 2.5)) # 增加延时，更礼貌

    print(f"\n所有卦处理完毕。")

    try:
        with open(OUTPUT_FILENAME, 'w', encoding='utf-8') as f:
            json.dump(all_hexagrams_data, f, ensure_ascii=False, indent=2)
        print(f"数据已成功保存到 {OUTPUT_FILENAME}")
    except IOError as e:
        print(f"保存文件 {OUTPUT_FILENAME} 失败: {e}")

if __name__ == "__main__":
    main()